---
title: K-threshold Composite Signatures for the Internet PKI
abbrev: K-threshold Sigs
docname: draft-pala-klaussner-composite-kofn-00

# <!-- stand_alone: true -->
ipr: trust200902
area: Security
wg: LAMPS
kw: Internet-Draft
cat: std
submissionType: IETF

coding: us-ascii
pi:    # can use array (if all yes) or hash here
  toc: yes
  sortrefs:   # defaults to yes
  symrefs: yes

author:
    -
      ins: M. Pala
      name: Massimiliano Pala
      org: CableLabs Inc.
      abbrev: CableLabs
      street: 858 Coal Creek Cir
      city: Louisville, Colorado
      country: United States of America
      code: 80027
      email: director@openca.org

    -
      ins: J. Klaussner
      name: Jan Klaussner
      org: D-Trust GmbH
      email: jan.klaussner@d-trust.net
      street: Kommandantenstr. 15
      code: 10969
      city: Berlin
      country: Germany

normative:
  I-D.ounsworth-pq-composite-keys: composite_keys
  I-D.ounsworth-pq-composite-sigs: composite_sigs
  X.690:
      title: "Information technology - ASN.1 encoding Rules: Specification of Basic Encoding Rules (BER), Canonical Encoding Rules (CER) and Distinguished Encoding Rules (DER)"
      date: November 2015
      author:
        org: ITU-T
      seriesinfo:
        ISO/IEC: 8825-1:2015

informative:
  I-D.driscoll-pqt-hybrid-terminology: pq_terminology

--- abstract

With the need to evolve the cryptography used in today applications, 
devices, and networks, there might be many scenarios where the use of a
single-key certificate is not sufficient. For example, there might be the
need for migrating between two existing algorithms (e.g., from classic
to post-quantum) or there might be the need to test the capabilities of
devices via test drivers and/or non-standard algorithms.

Differently from the situation where algorithms are not yet (or no more)
trusted to be used by themselves, this document addresses the use of multiple
keys and signatures that can be individually trusted to implement a generic
1-threshold and K-threshold signature validation procedures.

This document provides the definition of a new type of multi-algorithm
public key and relies on the definition of CompositePrivateKey,
and CompositeSignature which are sequences of the respective structure for each
component algorithm as defined in {{-composite_sigs}} and
{{-composite_sigs}}.

<!-- End of Abstract -->

--- middle

# Terminology {#terminology}

{::boilerplate bcp14+}

This document is consistent with the terminology defined in
{{-pq_terminology}}. In addition, the following terminology
is used throughout this document:


BER:
: Basic Encoding Rules (BER) as defined in {{X.690}}.

CLIENT:
: Any software that is making use of a cryptographic key.
  This includes a signer, verifier, encrypter, decrypter.
      

DER:
: Distinguished Encoding Rules as defined in {{X.690}}.

PKI:
: Public Key Infrastructure, as defined in {{!RFC5280}}.

PUBLIC / PRIVATE KEY:
: The public and private portion of an asymmetric cryptographic
  key, making no assumptions about which algorithm.

COMPONENT KEY:
: One component of the Composite Key. For example, an RSA, a
  Dilithium3 or a Falcon512 key.

# Introduction {#intro}

When the trust in the cryptographic algorithms is not static (e.g., not
enough crypto-analysis has happened yet or a new threat is envisioned to
be deployable in the next future), there might be the need to combine 
multiple algorithms together to address the crypto-uncertainty of the
envisioned period.         

An example of such a situation can be found in the planning for the transition
to post-quantum cryptography (PQ or PQC). While classic algorithms will still
be trusted for some time (but we do not know how much), there is uncertainty
as to the strength of the new cryptographic algorithms. Unlike previous
cryptographic algorithm migrations, the choice of when to migrate and which
algorithms to migrate to, is not so clear. 

Even after the migration period, it may be advantageous for an entity
cryptographic identity to be composed of multiple public-key algorithms
by using a Post-Quantum/Traditional (PQ/T) or Post-Quantum/Post-Quantum
(PQ/PQ) Hybrid scheme.

For further considerations on the challenges related to crypto-agility,
please refer to {{-composite_keys}}.

## Alternative Algorithms Support {#algorithms}

Although Composite cryptography and Hybrid solutions can be used in many
common use-cases to protect against algorithmic failures over time, there
are other use-cases that mandate for supporting crypto-interoperability to
continue to be able to operate old devices (e.g., not upgradable) when
deploying newer devices and crypto algorithms.

This is particularly true in environments where deployed devices might be
distributed in the field such as infrastructure's network elements (e.g.,
network routers, amplifiers, monitoring devices, cable modems, public access
points, etc.). The use of multi-algorithms provides a mechanism for enabling
forward compatibility with newer devices even when they cannot be upgraded.

At a practical level this means that we need a mechanism to still be able to
validate Composite signatures even when not all algorithms are supported by
all devices. 

This work introduces the concept of alternative signatures which joins the
family of hybrid options such as Composite Crypto.

# The MultiKey Approach Overview {#overview}

The MultiKey approach focus is to provide the possibility to validate Composite
signatures even when not all algorithms that were used in the generation of the
Composite signature are supported. From this point of view, the MultiKey approach
differs from the Composite crypto one in that it allows relying parties to
perform the validation of a subset of signatures instead of requiring the
successful validation of all signatures.

We define `n` the number of component key in the MultiKey key, and `k` the minimum
number of component signature successful validations required for the Composite
signature to be considered valid.

## 1-threshold and K-threshold signature validation {#threshold}

The MultiKey approach defined in this document leverages the same procedures
and data structures defined for pk-Composite {{-composite_keys}} with the
addition of an optional public key parameter. This optional parameter carries
the `K` value that represents the total number of skipped or erroneous signature
validations.

In practice, the MultiKey approach can support different validation policies
based on the value of the optional key parameter. For example, by setting the
value to one (1) it is possible to require that at least one (1) component
signature is correctly validated, thus providing support for true alternative
signatures. When using values greater than one (1), MultiKey keys can support
K of N models where at least K successful validations MUST take place before
the Composite signature is considered valid.

In the rest of the section we focus on the description of private and public key
structures, while in the next section we focus on the changes in the validation
process when compared to signatures generated via Composite Keys.

## MultiKey Private Keys {#private_keys}

This section provides an encoding for MultiKey private keys intended for PKIX
protocols and other applications that require an interoperable format for
transmitting private keys, such as PKCS #8 {{!RFC5958}}, PKCS #12 {{!RFC7292}},
CMP {{!RFC4210}}, or CRMF {{!RFC4211}}.

The format for the individual component key in a MultiKey key is defined by the
algorithm OID that identifies the component key. The format of the MultiKey
described in this section is meant to provide an interoperable format that can
be adopted and implemented across implementations.

This document does not cover the use-case where individual components may be
stored in multiple cryptographic modules.

The MultiKey private key data use the same structure as in CompositePrivateKey
where each component key is a OneAsymmetricKey {{!RFC5958}} object:

~~~ ASN.1
MultiKeyPrivateKey ::= CompositePrivateKey
~~~
{: artwork-name="MultiKeyPrivateKey-asn.1-structures"}

A MultiKeyPrivateKey MUST contain at least two component private keys, and they
MUST be in the same order as in the corresponding MultiKeyPublicKey.

## MultiKey Public Keys {#public_keys}

MultiKey Public Keys are identified by a unique OID and the associated definition
of the related data structure for a multi-algorithm public key, namely a MultiKey
key.

The OID that identifies a generic MultiKey key is defined as follows:

~~~ ASN.1
    id-multikey-key OBJECT IDENTIFIER ::= { 
      iso(1) identified-organization(3) dod(6) 
      internet(1) private(4) enterprise(1) OpenCA(18227)
      Algorithms(2) PublicKey(1) Experimental(999) 
      MultiKey(2) }
~~~
{: artwork-name="MultiKeyObjectIdentifier-asn.1-structures" artwork-align="center" }

The associated definition of MultiKey's public key (pk-MultiKey) and MultiKey's
public key parameters (MultiKey-params) structures are as follows:

~~~ ASN.1
MultiKey-params ::= INTEGER (1..MAX)

pk-MultiKey PUBLIC-KEY ::= {
  id id-multikey-key
  KeyValue MultiKeyPublicKey
  Params TYPE MultiKey-params ARE optional
  PrivateKey MultiKeyPrivateKey
}
~~~
{: artwork-name="MultiKeyPublicKey-asn.1-structures" artwork-align="center" }

Where the MultiKey-params is used to specify the number of minimum successful
validations required for the signature to be considered valid.

The value of the MultiKey-params must be greater or equal to one (1)
and shall not exceed the number of component keys present in the
MultiKey public key.

The use of MultiKey algorithm in a component key is not allowed in
a MultiKey key.

## Composite Signature Extended definition {#extended_sigs}

The sa-CompositeSignature structure is extended as follows:

~~~ ASN.1
sa-CompositeSignatureEx SIGNATURE-ALGORITHM ::= {
       IDENTIFIER id-alg-composite
       VALUE CompositeSignatureValue
       PARAMS ANY DEFINED BY ALGORITHM
       PUBLIC-KEYS { pk-Composite | pk-MultiKey }
       SMIME-CAPS { IDENTIFIED BY id-alg-composite } }
~~~
{: artwork-name="sa-CompositeSignatureEx-asn.1-structures" align="center" }

The difference with the original `sa-CompositeSignature` definition is the introduction
of the `pk-MultiKey` in the `PUBLIC-KEYS` definition.

# MultiKey Signature Processes {#signature_process}

This section specifies the processes for generating and verifying composite
signatures generated via MultiKey keys.

## Generating Composite Signatures {#signing}

When using MultiKey to generate signatures, the process is the same as
in the Composite case. Please refer to section 5.1 of {{-composite_sigs}}.

## Validating Composite Signatures {#validating}

When validating composite signatures generated via MultiKey keys, the
validation procedures are modified in two different ways:
- Allowing some component signatures validation failures to occur before
  failing the validation of the composite signature
- Allowing to skip some component signature validation as needed

The total number of failed and skipped component signature validation
cannot exceed the `K` value encoded in the MultiKey-params integer value.
When this happens, the composite signature MUST be considered
invalid.

When compared to the composite signatures' validation process, the only
modified step is during the individual component's validation for...loop
where the invalid signature output is emitted only if the number of
failures (variable `F`) exceeds the value encoded in the public key
parameter (variable `K`).

The Input and Output definitions are the same as defined in composite:

~~~
Input:
     P1, P2, .., Pn    Public verification keys. 

     M                 Message
     
     S1, S2, .., Sn    Component signature values.
     
     A1, A2, ... An    Component signature algorithms.

Output:

    Validity (bool)    "Valid signature" (true) if the composite 
                        signature is valid, "Invalid signature" 
                        (false) otherwise.
~~~
{: artwork-align="center" artwork-name="MultiKeyValidation.process-setup" }

The following process is used to perform composite signatures verification
with a MultiKey key:

~~~
1. Check keys, signatures, and algorithms for consistency.

   If Error during desequencing, or the three sequences
   have different numbers of elements, or any of the public
   keys P1, P2, .., Pn or algorithm identifiers A1, A2, ..,
   An are multikey with the OID id-alg-composite or an
   explicit composite OID then output "Invalid signature"
   and stop.

2. Check each component signature individually, according to
   its algorithm specification. If the number of failures
   exceed the parameter K, then the entire signature validation
   fails.

   K := MultiKey-params | 0
   F := 0 
   for i := 1 to n:
     if not verify( Pi, M, Si, Ai ) and F > K:
       output "Invalid signature"
     else:
       F++

3. Output "Valid signature"
~~~
{: artwork-align="center" artwork-name="alg-sig-verify" }

<!-- End of Introduction section -->

# Algorithm Identifiers {#identifiers}

In this work, we define a set of OIDs that allow for assigning explicit
algorithm combination to specific MultiKey keys configuration.

Please refer to Appendix {{identifiers}} for more details about
explicit MultiKey identifiers.

## Signature Algorithm Identifiers {#signature_identifiers}

This document does not define a separate sets of algorithms and leverages the
extends the definitions of composite signatures defined in {{-composite_sigs}}
with the addition of the pk-multikey-key in the PUBLIC-KEYS set.

## Public Key Algorithm Identifiers {#public_key_identifiers}

Section {{public_keys}} provides the definition for the generic MultiKey
key identifier. The generic construct for a MultiKey key allows for both
standard and non-standard (i.e., private, test, etc.) public key algorithms
to be used to produce composite signatures.

Similarly to the composite case, the use of explicit combinations of
algorithms can simplify the management of identities by allowing for
inspecting a single OID (the outmost one) instead of requiring the
inspection of the individual components of the MultiKey key.

# Deprecating Algorithms and Impact over signature validations

Traditionally, a public key, certificate, or signature contains a single
cryptographic algorithm and to revoke a certificate due to algorithm
depecation we still need to use serial-number-based revocations.

However, in a multi-algorithms environment (e.g., supported via Composite,
MultiKey, or other Hybrid approaches), it might be possible to deprecate
an entire algorithm and still be able to securely continue performing
authentications and validations instead of revoking (or simply distrust)
the entire infrastructure (and without adding every single certificate
that relies on the deprecated algorithm on the revocation list).

By integrating the concept of deprecated algorithms, in the MultiKey case 
it is possible to dynamically switch among which algorithms are going to
be used for signature validations by informing the validating entity about
the OIDs of the individual algorithms that are considered "failures".

In fact, the validating entity can automatically "fail" the validation of
component signatures that match any value present in the list of revoked
algorithms, exactly in the same fashion as when the algorithm is not
supported in the first place.

## Distributing the list of deprecated algorithms

As we just mentioned, in MultiKey environments, there are situations
where the validation of a component signature that carries a deprecated
algorithm identifier might still be allowed, e.g. when at least another
`K` validate correctly.

On top of that, there are also typical use-cases where the deprecation
of an algorithm is paramount to make sure that authentications do not
rely only on deprecated algorithms. This is the case, for example, when
older devices that can only successfully validate one algorithm from a
composite signature (e.g., it can validate RSA signatures but no other)
are still part of the network. When the only algorithm that they can use
is deprecated, validation of composite signature MUST fail. 

Differently from the pure composite case, if the device can still
successfully validate `K` component signatures, the device does not need
to be re-provisioned (or replaced) and can continue to operate by
relying on the non-deprecated algorithm.

The list of deprecated algorithms that are to be considered automatic
validation "failures" can be directly configured as a parameter in the
validating entity's process, or by accessing a trusted source of
information.

In an ecosystem such as the Internet PKI or IoT PKIs, since algorithm
deprecation can be seen as another form of (mass) revocation, a convenient
mechanism to distribute the list of deprecated algorithms by adding a
specific extension to Certificate Revocation Lists {{!RFC5280}} or Online
Certificate Status Protocol {{!RFC6960}} responses.

We define a new `deprecated-algorithms` extension together with the
associated `id-ext-deprecated-algorithms` identifier. The data structure
of the extension is defined as a `SEQUENCE` of `DeprecatedAlgorithm`.
Each `DeprecatedAlgorithm` is defined as an `OBJECT IDENTIFIER`.

We define the following identifier:

~~~asn.1
id-ce-deprecatedAlgsList OBJECT IDENTIFIER ::= { 
      iso(1) identified-organization(3) dod(6) 
      internet(1) private(4) enterprise(1) OpenCA(18227)
      Extensions(3) deprecated-algs (2) }
~~~


# IANA Considerations {#sec-iana}

This document registers the following in the SMI "Security for PKIX Algorithms (1.3.6.1.5.5.7.6)" registry:

~~~ ASN.1
id-composite-key OBJECT IDENTIFIER ::= {
    iso(1) identified-organization(3) dod(6) internet(1) security(5)
    mechanisms(5) pkix(7) algorithms(6) id-multikey-key(??) }
~~~

This document registers the following in the SMI " " registry:

~~~ ASN.1
id-ce-deprecatedAlgsList OBJECT IDENTIFIER ::= { id-ce deprecatedAlgsList(??) }
~~~

# Security Considerations {#security-considerations}


<!-- End of Security Considerations section -->

<!-- Start of Appendices -->
--- back

# Explicit Algorithm Identifiers {#explicit-algorithms}

This variant provides a rigid way of specifying supported
combinations of algorithms.

Although this variant limits the possibility for combining
non-standard algorithms (or algorithms not considered by the
authors of this document), the use of identifiers that identify
pairs of standard algorithms might be easier in certain
situations such as referencing and/or enforcing specific
combinations of algorithms without the need for developing
additional validation procedures external to the signature
validation one.

Explicit algorithms must define a new signature algorithm which
consists of:

*  A new algorithm identifier OID for the explicit algorithm.
*  The algorithm identifier OID and PUBLIC-KEY type of each component
   algorithm.
*  Signature parameters either declared ABSENT, or defined with a
   type and encoding.

The definition of the explicit algorithm identifiers follows
the same definitions provided in Section 4.2 of {{-composite_keys}}
with the exception of the parameters that are not ABSENT but
OPTIONAL and their TYPE is MultiKey-params as defined in {{public_keys}}.


# ASN.1 Module

~~~ ASN.1

<CODE STARTS>

MultiKey-2022

DEFINITIONS IMPLICIT TAGS ::= BEGIN

EXPORTS ALL;

IMPORTS
  PUBLIC-KEY, SIGNATURE-ALGORITHM, ParamOptions, AlgorithmIdentifier{}
    FROM AlgorithmInformation-2009  -- RFC 5912 [X509ASN1]
      { iso(1) identified-organization(3) dod(6) internet(1)
        security(5) mechanisms(5) pkix(7) id-mod(0)
        id-mod-algorithmInformation-02(58) }

  SubjectPublicKeyInfo
    FROM PKIX1Explicit-2009
      { iso(1) identified-organization(3) dod(6) internet(1)
        security(5) mechanisms(5) pkix(7) id-mod(0)
        id-mod-pkix1-explicit-02(51) }

  OneAsymmetricKey
    FROM AsymmetricKeyPackageModuleV1
      { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)
        pkcs-9(9) smime(16) modules(0)
        id-mod-asymmetricKeyPkgV1(50) } ;

  COMPOSITE-KEY-ALGORITHM, pk-Composite, CompositePublicKey, 
    CompositePrivateKey, pk-explicitComposite, id-composite-key
    FROM Composite-Keys-2022 -- {{I-D.draft-ounsworth-pq-sigs}}
      { ... }
--
-- Object Identifiers
--
 

--
-- Public Key
--

END

<CODE ENDS>

~~~


# Intellectual Property Considerations

The following IPR Disclosure relates to this draft:

https://datatracker.ietf.org/ipr/3588/



# Contributors and Acknowledgements
This document incorporates contributions and comments from a large group of experts. The Editors would especially like to acknowledge the expertise and tireless dedication of the following people, who attended many long meetings and generated millions of bytes of electronic mail and VOIP traffic over the past year in pursuit of this document:

John Gray (Entrust),
Serge Mister (Entrust),
Scott Fluhrer (Cisco Systems),
Panos Kampanakis (Cisco Systems),
Daniel Van Geest (ISARA),
Tim Hollebeek (Digicert),
Klaus-Dieter Wirth (D-Trust), and
François Rousseau.

We are grateful to all, including any contributors who may have
been inadvertently omitted from this list.

This document borrows text from similar documents, including those referenced below. Thanks go to the authors of those
   documents.  "Copying always makes things easier and less error prone" - {{!RFC8411}}.

## Making contributions

Additional contributions to this draft are welcome. Please see the working copy of this draft at, as well as open issues at:

https://github.com/EntrustCorporation/draft-ounsworth-pq-composite-keys


<!-- End of Contributors section -->
